#!/usr/bin/env perl
use v5.24.1;
use Pod::Usage;
use Getopt::Long;
use Pod::Usage;
use PICA::Data ':all';
use Catmandu 'importer';
use Hash::MultiValue;
use HTTP::Tiny;
use DBI;

my $ANA = "https://coli-conc.gbv.de/coli-ana/dev/analyze";
my $SRU = "https://sru.k10plus.de/opac-de-627";
my $MAX = 1000;

GetOptions( \my %OPT,
    qw(all|a complete|c from|f:s help|h|? query|q remove|r sqlite|s:s update|u verbose|v) )
  or pod2usage(2);
pod2usage(0) if $OPT{help};
pod2usage("Please specify notation to query") if $OPT{query} and !@ARGV;

# Only include valid notations. Fixing invalid notations should be done elsewhere
sub wellformedDDC {
    my ( $ddc, $warn ) = @_;
    $ddc =~ s/[ \/']//g;
    return $ddc if $ddc =~ /^\d\d\d(\.\d+)?$/;
    warn "invalid DDC notation: $_[0]\n" if $warn or $OPT{verbose};
}

# Optionally create or open database cache
my $SQL;
if ( my $file = $OPT{sqlite} ) {
    warn "Creating non-existing SQLite file $file\n" unless -f $file;
    $SQL =
      DBI->connect( "dbi:SQLite:dbname=$file", "", "", { RaiseError => 1 } );
    $SQL->do(<<SQL);
CREATE TABLE IF NOT EXISTS coli_ana (
  notation TEXT NOT NULL,
  pica TEXT,
  timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
)
SQL
}

# Core method
sub enrichRecord {
    my ( $pica, $ddc ) = @_;

    # record must have one PPN
    my $result = $pica->fields('003@');
    return unless @$result == 1;
    my $ppn = $result->[0][3];

    # collect DDC notations found in the record
    my $found = Hash::MultiValue->new;
    my %analyzed;
    for my $field ( @{ $pica->fields( '045F/*', '045H/*' ) } ) {
        my $tag = $field->[0];
        my $sf  = pica_subfields( [$field] );

        my ( $notation, @more ) = $sf->get_all('a');
        next if @more;    # we cannot safely handle repeated $a
        $notation = wellformedDDC($notation) or next;

        next if $ddc and $notation ne $ddc and !$OPT{all};

        if ( $tag eq '045H' and grep { $_ eq 'coli-ana' } $sf->get_all('A') ) {
            $analyzed{$notation} = $field;
        }

        $found->add( $notation, $field );
    }

    if ( $OPT{verbose} ) {
        if ( keys %$found ) {
            $found->each(
                sub {
                    info( "PPN $ppn has $_[0] in " . pica_string( [ $_[1] ] ) );
                }
            );
        }
        else {
            warn "PPN $ppn has no well-formed DDC notations.\n";
        }
    }

    for my $notation ( keys %$found ) {

        # analysis of this notations is already in the record
        if ( my $currentAna = $analyzed{$notation} ) {
            next unless $OPT{update} or $OPT{remove};

            # DANGER ZONE
            my $ana = coliAnaResult($notation);
            if ($ana) {
                next if join( '$', @$currentAna ) eq join( '$', @$ana );

                # analysis has changed
                if ( $OPT{update} ) {
                    push @$currentAna, '-';
                    push @$result,     $currentAna;

                }
            }
            elsif ( $OPT{remove} ) {
                push @$currentAna, '-';
                push @$result,     $currentAna;
            }

            # TODO: if this notation is *only* as analyzed, then remove it
        }
        else {
            my $ana = coliAnaResult($notation);
            if ($ana) {
                push @$result, $found->get_all($notation);
                push @$ana,    '+';
                push @$result, $ana;
            }
        }

    }

    return $result if @$result > 1;
}

sub info {
    say $_[0] if $OPT{verbose};
}

sub firstPicaField {
    my $pica = pica_parser( 'plain', \$_[0] )->next;
    return $pica ? $pica->fields->[0] : undef;
}

# Lookup via coli-ana API
sub coliAnaQuery {
    my ($notation) = shift;

    my $url = "$ANA?notation=$notation&format=pp";
    $url .= "&complete=1" if $OPT{complete};
    info($url);

    my $res = HTTP::Tiny->new->get($url);
    return $res->{content} if $res->{success};
}

sub coliAnaResult {
    my $notation = shift;

    # get result from cache
    if ($SQL) {

# TODO: result must not be too old and 'complete' flag should be taken into account
        my ($result) =
          $SQL->selectrow_array( 'SELECT pica FROM coli_ana WHERE notation=?',
            undef, $notation );
        if ($result) {
            return $result eq '?' ? undef : firstPicaField($result);
        }
    }

    # query coli-ana API
    my $pp   = coliAnaQuery($notation);
    my $pica = firstPicaField($pp);
    info("API result: $pp");

    # insert into cache
    if ($SQL) {
        state $insert =
            $SQL
          ? $SQL->prepare('INSERT INTO coli_ana(notation,pica) VALUES (?,?)')
          : undef;
        $insert->execute( $notation, $pica ? $pp : '?' );
        info("result added to $OPT{sqlite}");
    }

    return $pica;
}

my @notations = map { $_ if wellformedDDC( $_, 1 ) } @ARGV;

my $reader = pica_parser($OPT{from} || 'plain');
my $writer = pica_writer( 'plain', annotate => 1 );

if ($OPT{query}) {

    # search records with given DDC notation and enrich them
    foreach my $ddc (@notations) {
        my $query = "pica.ddc=$ddc";
        my %options = (
            base         => $SRU,
            recordSchema => 'picaxml',
            parser       => 'picaxml',
            total        => $MAX,
            query        => $query
        );
        info("SRU query $query");
        importer( 'SRU', %options )->each(
            sub {
                my $pica = bless shift, 'PICA::Data';
                $writer->write( enrichRecord( $pica, $ddc ) || [] );
            }
        );
    }
}
else {

    # read records from stdin and enrich all DDC notations found in the record
    while ( my $rec = $reader->next ) {
        $writer->write( enrichRecord($rec, @notations) || [] );
    }
}

=head1 SYNOPSIS

coli-ana-enrich [options] [notation]

Reads PICA+ from stdin (or K10plus with -q) to enrich with DDC analysis.

=head1 OPTIONS

 --all|-a          include all notations found in a queried record
 --complete|-c     only include complete analysis
 --from|f FORMAT   input record format (binary, normalized, plain...)
 --help|-h|-?      this help message
 --query|-q        get K10plus records with given notation search via SRU
 --remove|-r       remove analysis in K10plus, if not available anymore
 --sqlite|-s FILE  use given SQLite file for caching coli-ana results
 --update|-u       update analysis in K10plus, if it has been changed
 --verbose|-v      print debugging information

=cut
